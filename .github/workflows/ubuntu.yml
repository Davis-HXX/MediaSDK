name: centos_build
on:
  push:
    branches: []
  pull_request:
    branches: []
jobs:
  metatest_run_on_linux:
    runs-on: [self-hosted, linux, x64]
    steps:
    - name: runner_information
      run: |
        export
    - name: checkout_repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: build_docker_image_centos
      run: |
        echo "${GITHUB_WORKSPACE}"
        echo $GITHUB_WORKSPACE
        echo "$(GITHUB_WORKSPACE)"
        docker build docker build "${GITHUB_WORKSPACE}"/MediaSDK/.github/dockerfiles/centos` -f centos8.1
    - name: docker_run
      run: docker run -d --name "${GITHUB_SHA}" --mount type=bind,source="${GITHUB_WORKSPACE}",target=/repo



# env:
#   CFLAGS: -O2 -Wformat -Wformat-security -Wall -Werror -D_FORTIFY_SOURCE=2 -fstack-protector-strong

# jobs:
#   clang12-api-latest:
#     runs-on: ubuntu-20.04
#     env:
#       CC: /usr/bin/clang-12
#       CXX: /usr/bin/clang++-12
#       ASM: /usr/bin/clang-12
#     steps:
#     - name: checkout libmfx
#       uses: actions/checkout@v2
#       with:
#         path: libmfx
#     - name: checkout libva
#       uses: actions/checkout@v2
#       with:
#         repository: intel/libva
#         path: libva
#     - name: install toolchain
#       run: |
#         if [[ -e $CC && -e $CXX ]]; then \
#           echo "clang-12 already presents in the image"; \
#         else \
#           echo "clang-12 missed in the image, installing from llvm"; \
#           echo "deb [trusted=yes] http://apt.llvm.org/focal/ llvm-toolchain-focal-12 main" | sudo tee -a /etc/apt/sources.list; \
#           sudo apt-get update; \
#           sudo apt-get install -y --no-install-recommends clang-12; \
#         fi
#     - name: install prerequisites
#       run: |
#         sudo apt-get update
#         sudo apt-get install -y --no-install-recommends \
#           cmake \
#           libdrm-dev \
#           libegl1-mesa-dev \
#           libgl1-mesa-dev \
#           libx11-dev \
#           libx11-xcb-dev \
#           libxcb-dri3-dev \
#           libxcb-present-dev \
#           libxext-dev \
#           libxfixes-dev \
#           libwayland-dev \
#           ocl-icd-opencl-dev \
#           opencl-clhpp-headers \
#           make
#     - name: print tools versions
#       run: |
#         cmake --version
#         $CC --version
#         $CXX --version
#     - name: build libva
#       run: |
#         cd libva
#         ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu
#         make -j$(nproc)
#         sudo make install
#     - name: build libmfx
#       run: |
#         cd libmfx
#         mkdir build && cd build
#         cmake -DAPI=latest -DBUILD_ALL=ON -DENABLE_ALL=ON -DENABLE_ITT=OFF -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" -DCMAKE_CXX_FLAGS_RELEASE="$CFLAGS" ..
#         make -j$(nproc)
#         make test
#         sudo make install

#   clang10:
#     runs-on: ubuntu-20.04
#     env:
#       CC: /usr/bin/clang-10
#       CXX: /usr/bin/clang++-10
#       ASM: /usr/bin/clang-10
#     steps:
#     - name: checkout libmfx
#       uses: actions/checkout@v2
#       with:
#         path: libmfx
#     - name: checkout libva
#       uses: actions/checkout@v2
#       with:
#         repository: intel/libva
#         path: libva
#     - name: install prerequisites
#       run: |
#         sudo apt-get update
#         sudo apt-get install -y --no-install-recommends \
#           cmake \
#           libdrm-dev \
#           libegl1-mesa-dev \
#           libgl1-mesa-dev \
#           libx11-dev \
#           libx11-xcb-dev \
#           libxcb-dri3-dev \
#           libxcb-present-dev \
#           libxext-dev \
#           libxfixes-dev \
#           libwayland-dev \
#           ocl-icd-opencl-dev \
#           opencl-clhpp-headers \
#           make
#     - name: print tools versions
#       run: |
#         cmake --version
#         $CC --version
#         $CXX --version
#     - name: build libva
#       run: |
#         cd libva
#         ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu
#         make -j$(nproc)
#         sudo make install
#     - name: build libmfx
#       run: |
#         cd libmfx
#         mkdir build && cd build
#         cmake -DBUILD_ALL=ON -DENABLE_ALL=ON -DENABLE_ITT=OFF -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" -DCMAKE_CXX_FLAGS_RELEASE="$CFLAGS"  ..
#         make -j$(nproc)
#         make test
#         sudo make install

#   gcc10:
#     runs-on: ubuntu-20.04
#     env:
#       CC: /usr/bin/gcc-10
#       CXX: /usr/bin/g++-10
#       ASM: /usr/bin/gcc-10
#     steps:
#     - name: checkout libmfx
#       uses: actions/checkout@v2
#       with:
#         path: libmfx
#     - name: checkout libva
#       uses: actions/checkout@v2
#       with:
#         repository: intel/libva
#         path: libva
#     - name: install prerequisites
#       run: |
#         sudo apt-get update
#         sudo apt-get install -y --no-install-recommends \
#           cmake \
#           libdrm-dev \
#           libegl1-mesa-dev \
#           libgl1-mesa-dev \
#           libx11-dev \
#           libx11-xcb-dev \
#           libxcb-dri3-dev \
#           libxcb-present-dev \
#           libxext-dev \
#           libxfixes-dev \
#           libwayland-dev \
#           ocl-icd-opencl-dev \
#           opencl-clhpp-headers \
#           make
#     - name: print tools versions
#       run: |
#         cmake --version
#         $CC --version
#         $CXX --version
#     - name: build libva
#       run: |
#         cd libva
#         ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu
#         make -j$(nproc)
#         sudo make install
#     - name: build libmfx
#       run: |
#         cd libmfx
#         mkdir build && cd build
#         cmake -DBUILD_ALL=ON -DENABLE_ALL=ON -DENABLE_ITT=OFF -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" -DCMAKE_CXX_FLAGS_RELEASE="$CFLAGS"  ..
#         make -j$(nproc)
#         make test
#         sudo make install

#   gcc10-fastboot:
#     runs-on: ubuntu-20.04
#     env:
#       CC: /usr/bin/gcc-10
#       CXX: /usr/bin/g++-10
#       ASM: /usr/bin/gcc-10
#     steps:
#     - name: checkout libmfx
#       uses: actions/checkout@v2
#       with:
#         path: libmfx
#     - name: checkout libva
#       uses: actions/checkout@v2
#       with:
#         repository: intel/libva
#         path: libva
#     - name: install prerequisites
#       run: |
#         sudo apt-get update
#         sudo apt-get install -y --no-install-recommends \
#           cmake \
#           libdrm-dev \
#           libegl1-mesa-dev \
#           libgl1-mesa-dev \
#           libx11-dev \
#           libx11-xcb-dev \
#           libxcb-dri3-dev \
#           libxcb-present-dev \
#           libxext-dev \
#           libxfixes-dev \
#           libwayland-dev \
#           ocl-icd-opencl-dev \
#           opencl-clhpp-headers \
#           make
#     - name: print tools versions
#       run: |
#         cmake --version
#         $CC --version
#         $CXX --version
#     - name: build libva
#       run: |
#         cd libva
#         ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu
#         make -j$(nproc)
#         sudo make install
#     - name: build libmfx
#       run: |
#         cd libmfx
#         mkdir build && cd build
#         cmake -DMFX_CONFIG_FILE=$(pwd)/../builder/profiles/fastboot.cmake -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" -DCMAKE_CXX_FLAGS_RELEASE="$CFLAGS" ..
#         make -j$(nproc)
#         sudo make install
